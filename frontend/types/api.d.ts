/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/accounts/api-token-auth/": {
    post: operations["accounts_api_token_auth_create"];
  };
  "/accounts/password-reset/": {
    /**
     * @description Представление API для сброса пароля.
     *
     * Это представление обрабатывает POST-запросы для отправки ссылки для сброса пароля.
     * Использует `PasswordResetSerializer` для валидации данных запроса.
     * Доступ к этому эндпоинту не требует аутентификации или разрешений.
     */
    post: operations["accounts_password_reset_create"];
  };
  "/accounts/register/": {
    /**
     * @description Представление API для получения списка пользователей.
     *
     * Это представление обрабатывает GET-запросы для получения списка всех пользователей.
     * Использует `UserSerializer` для сериализации данных пользователей.
     * Доступ к этому эндпоинту не требует аутентификации или разрешений.
     */
    post: operations["accounts_register_create"];
  };
  "/accounts/reset-password-confirm/{uidb64}/{token}/": {
    /**
     * @description Представление API для подтверждения сброса пароля.
     *
     * Это представление обрабатывает POST-запросы для подтверждения сброса пароля.
     * Использует `PasswordResetConfirmSerializer` для валидации данных запроса.
     * Доступ к этому эндпоинту не требует аутентификации или разрешений.
     */
    post: operations["accounts_reset_password_confirm_create"];
  };
  "/accounts/token/": {
    /**
     * @description Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["accounts_token_create"];
  };
  "/accounts/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["accounts_token_refresh_create"];
  };
  "/accounts/token/verify/": {
    /**
     * @description Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["accounts_token_verify_create"];
  };
  "/accounts/users/me/": {
    /**
     * @description Представление API для профиля пользователя.
     *
     * Это представление обрабатывает GET-запросы для получения профиля пользователя.
     * Использует `UserProfileSerializer` для сериализации данных пользователя.
     * Доступ к этому эндпоинту требует аутентификации.
     */
    get: operations["accounts_users_me_retrieve"];
    /**
     * @description Представление API для профиля пользователя.
     *
     * Это представление обрабатывает GET-запросы для получения профиля пользователя.
     * Использует `UserProfileSerializer` для сериализации данных пользователя.
     * Доступ к этому эндпоинту требует аутентификации.
     */
    put: operations["accounts_users_me_update"];
    /**
     * @description Представление API для профиля пользователя.
     *
     * Это представление обрабатывает GET-запросы для получения профиля пользователя.
     * Использует `UserProfileSerializer` для сериализации данных пользователя.
     * Доступ к этому эндпоинту требует аутентификации.
     */
    delete: operations["accounts_users_me_destroy"];
    /**
     * @description Представление API для профиля пользователя.
     *
     * Это представление обрабатывает GET-запросы для получения профиля пользователя.
     * Использует `UserProfileSerializer` для сериализации данных пользователя.
     * Доступ к этому эндпоинту требует аутентификации.
     */
    patch: operations["accounts_users_me_partial_update"];
  };
  "/gp4_analitika/d_ychet/": {
    get: operations["gp4_analitika_d_ychet_list"];
    post: operations["gp4_analitika_d_ychet_create"];
  };
  "/gp4_analitika/d_ychet/{id}/": {
    get: operations["gp4_analitika_d_ychet_retrieve"];
    put: operations["gp4_analitika_d_ychet_update"];
    delete: operations["gp4_analitika_d_ychet_destroy"];
    patch: operations["gp4_analitika_d_ychet_partial_update"];
  };
  "/gp4_analitika/death_data/": {
    get: operations["gp4_analitika_death_data_list"];
    post: operations["gp4_analitika_death_data_create"];
  };
  "/gp4_analitika/death_data/{id}/": {
    get: operations["gp4_analitika_death_data_retrieve"];
    put: operations["gp4_analitika_death_data_update"];
    delete: operations["gp4_analitika_death_data_destroy"];
    patch: operations["gp4_analitika_death_data_partial_update"];
  };
  "/gp4_analitika/patients/": {
    get: operations["gp4_analitika_patients_list"];
    post: operations["gp4_analitika_patients_create"];
  };
  "/gp4_analitika/patients/{id}/": {
    get: operations["gp4_analitika_patients_retrieve"];
    put: operations["gp4_analitika_patients_update"];
    delete: operations["gp4_analitika_patients_destroy"];
    patch: operations["gp4_analitika_patients_partial_update"];
  };
  "/gp4_analitika/profosmotr/": {
    get: operations["gp4_analitika_profosmotr_list"];
    post: operations["gp4_analitika_profosmotr_create"];
  };
  "/gp4_analitika/profosmotr/{id}/": {
    get: operations["gp4_analitika_profosmotr_retrieve"];
    put: operations["gp4_analitika_profosmotr_update"];
    delete: operations["gp4_analitika_profosmotr_destroy"];
    patch: operations["gp4_analitika_profosmotr_partial_update"];
  };
  "/gp4_analitika/uchastki/": {
    get: operations["gp4_analitika_uchastki_list"];
    post: operations["gp4_analitika_uchastki_create"];
  };
  "/gp4_analitika/uchastki/{id}/": {
    get: operations["gp4_analitika_uchastki_retrieve"];
    put: operations["gp4_analitika_uchastki_update"];
    delete: operations["gp4_analitika_uchastki_destroy"];
    patch: operations["gp4_analitika_uchastki_partial_update"];
  };
  "/gp4_analitika/vaccinations/": {
    get: operations["gp4_analitika_vaccinations_list"];
    post: operations["gp4_analitika_vaccinations_create"];
  };
  "/gp4_analitika/vaccinations/{id}/": {
    get: operations["gp4_analitika_vaccinations_retrieve"];
    put: operations["gp4_analitika_vaccinations_update"];
    delete: operations["gp4_analitika_vaccinations_destroy"];
    patch: operations["gp4_analitika_vaccinations_partial_update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthToken: {
      /** Имя пользователя */
      username: string;
      /** Пароль */
      password: string;
      /** Токен */
      token: string;
    };
    /**
     * @description * `Пенсионер` - Пенсионер
     * * `Работающий` - Работающий
     * * `Студент` - Студент
     * * `Школьник` - Школьник
     * * `Инвалид` - Инвалид
     * * `Все записи` -
     * @enum {string}
     */
    CategoryEnum: "Пенсионер" | "Работающий" | "Студент" | "Школьник" | "Инвалид" | "Все записи";
    D_ychet: {
      id: number;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      diagnosis: string;
      /** Format: date */
      last_visit: string;
      patient: number;
    };
    DeathData: {
      id: number;
      place_of_death: string;
      LPU_death: string;
      department_death: string;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      diagnosis: string;
      death_cause: string;
      /** Format: date */
      SMP_date: string;
      SMP_diagnosis: string;
      death_certificate: string;
      /** Format: date */
      death_certificate_date: string;
      patient: number;
    };
    /** @enum {unknown} */
    NullEnum: "";
    PaginatedD_ychetList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["D_ychet"][];
    };
    PaginatedDeathDataList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["DeathData"][];
    };
    PaginatedPatientList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Patient"][];
    };
    PaginatedProfosmotrList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Profosmotr"][];
    };
    PaginatedUchastkiList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Uchastki"][];
    };
    PaginatedVaccinationList: {
      /** @example 123 */
      count: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null;
      results: components["schemas"]["Vaccination"][];
    };
    PasswordReset: {
      /** Format: email */
      email: string;
    };
    PasswordResetConfirm: {
      /** Новый пароль */
      new_password: string;
      /** Повторите новый пароль */
      new_confirm_password: string;
    };
    PatchedD_ychet: {
      id?: number;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      diagnosis?: string;
      /** Format: date */
      last_visit?: string;
      patient?: number;
    };
    PatchedDeathData: {
      id?: number;
      place_of_death?: string;
      LPU_death?: string;
      department_death?: string;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      diagnosis?: string;
      death_cause?: string;
      /** Format: date */
      SMP_date?: string;
      SMP_diagnosis?: string;
      death_certificate?: string;
      /** Format: date */
      death_certificate_date?: string;
      patient?: number;
    };
    PatchedPatient: {
      id?: number;
      uchastok_name?: string;
      uchastok_code?: string;
      /** Имя */
      name?: string;
      /** Фамилия */
      surname?: string;
      /** Отчество */
      patronymic?: string;
      /**
       * Дата рождения
       * Format: date
       */
      date_of_birth?: string;
      /**
       * Дата смерти
       * Format: date
       */
      date_of_death?: string;
      /**
       * Возраст
       * Format: int64
       */
      age?: number;
      /** Адрес */
      address?: string;
      /** Телефон */
      phone?: string;
      /** СНИЛС */
      snils?: string;
      /** МО прикрепления */
      MO_prikrepl?: string;
      /** Льгота */
      lgota?: string;
      /** Категория */
      category?: components["schemas"]["CategoryEnum"] | components["schemas"]["NullEnum"] | null;
      /** Участок */
      ychastok?: number | null;
    };
    PatchedProfosmotr: {
      id?: number;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      diagnosis?: string;
      gr_zd?: string;
      patient?: number;
    };
    PatchedUchastki: {
      id?: number;
      /** Название участка */
      name?: string;
      /** Код участка */
      code?: string;
    };
    PatchedUserProfile: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username?: string;
      /**
       * Адрес электронной почты
       * Format: email
       */
      email?: string;
      /**
       * Дата рождения
       * Format: date
       */
      bith_date?: string | null;
      /** Мобильный телефон */
      mobile_phone?: string | null;
      /**
       * Аватар
       * Format: uri
       */
      avatar?: string | null;
      /** Адрес */
      address?: string | null;
      /** Комментарий */
      comment?: string | null;
    };
    PatchedVaccination: {
      id?: number;
      /** Format: date */
      date?: string;
      vaccine?: string;
      patient?: number;
    };
    Patient: {
      id: number;
      uchastok_name: string;
      uchastok_code: string;
      /** Имя */
      name: string;
      /** Фамилия */
      surname: string;
      /** Отчество */
      patronymic: string;
      /**
       * Дата рождения
       * Format: date
       */
      date_of_birth: string;
      /**
       * Дата смерти
       * Format: date
       */
      date_of_death: string;
      /**
       * Возраст
       * Format: int64
       */
      age: number;
      /** Адрес */
      address: string;
      /** Телефон */
      phone: string;
      /** СНИЛС */
      snils: string;
      /** МО прикрепления */
      MO_prikrepl: string;
      /** Льгота */
      lgota: string;
      /** Категория */
      category?: components["schemas"]["CategoryEnum"] | components["schemas"]["NullEnum"] | null;
      /** Участок */
      ychastok?: number | null;
    };
    Profosmotr: {
      id: number;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      diagnosis: string;
      gr_zd: string;
      patient: number;
    };
    TokenObtainPair: {
      username: string;
      password: string;
      access: string;
      refresh: string;
    };
    TokenRefresh: {
      access: string;
      refresh: string;
    };
    TokenVerify: {
      token: string;
    };
    Uchastki: {
      id: number;
      /** Название участка */
      name: string;
      /** Код участка */
      code: string;
    };
    UserCreate: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string;
      /**
       * Адрес электронной почты
       * Format: email
       */
      email?: string;
      /** Пароль */
      password: string;
      /** Пароль еще раз */
      password_confirm: string;
    };
    UserProfile: {
      /**
       * Имя пользователя
       * @description Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
       */
      username: string;
      /**
       * Адрес электронной почты
       * Format: email
       */
      email?: string;
      /**
       * Дата рождения
       * Format: date
       */
      bith_date?: string | null;
      /** Мобильный телефон */
      mobile_phone?: string | null;
      /**
       * Аватар
       * Format: uri
       */
      avatar?: string | null;
      /** Адрес */
      address?: string | null;
      /** Комментарий */
      comment?: string | null;
    };
    Vaccination: {
      id: number;
      /** Format: date */
      date: string;
      vaccine: string;
      patient: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  accounts_api_token_auth_create: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["AuthToken"];
        "multipart/form-data": components["schemas"]["AuthToken"];
        "application/json": components["schemas"]["AuthToken"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthToken"];
        };
      };
    };
  };
  /**
   * @description Представление API для сброса пароля.
   *
   * Это представление обрабатывает POST-запросы для отправки ссылки для сброса пароля.
   * Использует `PasswordResetSerializer` для валидации данных запроса.
   * Доступ к этому эндпоинту не требует аутентификации или разрешений.
   */
  accounts_password_reset_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
        "multipart/form-data": components["schemas"]["PasswordReset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PasswordReset"];
        };
      };
    };
  };
  /**
   * @description Представление API для получения списка пользователей.
   *
   * Это представление обрабатывает GET-запросы для получения списка всех пользователей.
   * Использует `UserSerializer` для сериализации данных пользователей.
   * Доступ к этому эндпоинту не требует аутентификации или разрешений.
   */
  accounts_register_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["UserCreate"];
        "multipart/form-data": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserCreate"];
        };
      };
    };
  };
  /**
   * @description Представление API для подтверждения сброса пароля.
   *
   * Это представление обрабатывает POST-запросы для подтверждения сброса пароля.
   * Использует `PasswordResetConfirmSerializer` для валидации данных запроса.
   * Доступ к этому эндпоинту не требует аутентификации или разрешений.
   */
  accounts_reset_password_confirm_create: {
    parameters: {
      path: {
        token: string;
        uidb64: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PasswordResetConfirm"];
        };
      };
    };
  };
  /**
   * @description Takes a set of user credentials and returns an access and refresh JSON web
   * token pair to prove the authentication of those credentials.
   */
  accounts_token_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenObtainPair"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
        "multipart/form-data": components["schemas"]["TokenObtainPair"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenObtainPair"];
        };
      };
    };
  };
  /**
   * @description Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  accounts_token_refresh_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefresh"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
        "multipart/form-data": components["schemas"]["TokenRefresh"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  /**
   * @description Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  accounts_token_verify_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerify"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenVerify"];
        "multipart/form-data": components["schemas"]["TokenVerify"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenVerify"];
        };
      };
    };
  };
  /**
   * @description Представление API для профиля пользователя.
   *
   * Это представление обрабатывает GET-запросы для получения профиля пользователя.
   * Использует `UserProfileSerializer` для сериализации данных пользователя.
   * Доступ к этому эндпоинту требует аутентификации.
   */
  accounts_users_me_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  /**
   * @description Представление API для профиля пользователя.
   *
   * Это представление обрабатывает GET-запросы для получения профиля пользователя.
   * Использует `UserProfileSerializer` для сериализации данных пользователя.
   * Доступ к этому эндпоинту требует аутентификации.
   */
  accounts_users_me_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfile"];
        "application/x-www-form-urlencoded": components["schemas"]["UserProfile"];
        "multipart/form-data": components["schemas"]["UserProfile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  /**
   * @description Представление API для профиля пользователя.
   *
   * Это представление обрабатывает GET-запросы для получения профиля пользователя.
   * Использует `UserProfileSerializer` для сериализации данных пользователя.
   * Доступ к этому эндпоинту требует аутентификации.
   */
  accounts_users_me_destroy: {
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Представление API для профиля пользователя.
   *
   * Это представление обрабатывает GET-запросы для получения профиля пользователя.
   * Использует `UserProfileSerializer` для сериализации данных пользователя.
   * Доступ к этому эндпоинту требует аутентификации.
   */
  accounts_users_me_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUserProfile"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUserProfile"];
        "multipart/form-data": components["schemas"]["PatchedUserProfile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserProfile"];
        };
      };
    };
  };
  gp4_analitika_d_ychet_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedD_ychetList"];
        };
      };
    };
  };
  gp4_analitika_d_ychet_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["D_ychet"];
        "application/x-www-form-urlencoded": components["schemas"]["D_ychet"];
        "multipart/form-data": components["schemas"]["D_ychet"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["D_ychet"];
        };
      };
    };
  };
  gp4_analitika_d_ychet_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this d_ychet. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["D_ychet"];
        };
      };
    };
  };
  gp4_analitika_d_ychet_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this d_ychet. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["D_ychet"];
        "application/x-www-form-urlencoded": components["schemas"]["D_ychet"];
        "multipart/form-data": components["schemas"]["D_ychet"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["D_ychet"];
        };
      };
    };
  };
  gp4_analitika_d_ychet_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this d_ychet. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_d_ychet_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this d_ychet. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedD_ychet"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedD_ychet"];
        "multipart/form-data": components["schemas"]["PatchedD_ychet"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["D_ychet"];
        };
      };
    };
  };
  gp4_analitika_death_data_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDeathDataList"];
        };
      };
    };
  };
  gp4_analitika_death_data_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeathData"];
        "application/x-www-form-urlencoded": components["schemas"]["DeathData"];
        "multipart/form-data": components["schemas"]["DeathData"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DeathData"];
        };
      };
    };
  };
  gp4_analitika_death_data_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this death data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeathData"];
        };
      };
    };
  };
  gp4_analitika_death_data_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this death data. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeathData"];
        "application/x-www-form-urlencoded": components["schemas"]["DeathData"];
        "multipart/form-data": components["schemas"]["DeathData"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeathData"];
        };
      };
    };
  };
  gp4_analitika_death_data_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this death data. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_death_data_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this death data. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDeathData"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDeathData"];
        "multipart/form-data": components["schemas"]["PatchedDeathData"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeathData"];
        };
      };
    };
  };
  gp4_analitika_patients_list: {
    parameters: {
      query?: {
        MO_prikrepl?: string;
        address?: string;
        age?: string;
        /**
         * @description * `Пенсионер` - Пенсионер
         * * `Работающий` - Работающий
         * * `Студент` - Студент
         * * `Школьник` - Школьник
         * * `Инвалид` - Инвалид
         * * `Все записи` -
         */
        category?: "Все записи" | "Инвалид" | "Пенсионер" | "Работающий" | "Студент" | "Школьник" | null;
        date_of_birth_after?: string;
        date_of_birth_before?: string;
        date_of_death_after?: string;
        date_of_death_before?: string;
        lgota?: string;
        name?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
        /** @description Number of results to return per page. */
        page_size?: number;
        patronymic?: string;
        phone?: string;
        snils?: string;
        surname?: string;
        ychastok?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPatientList"];
        };
      };
    };
  };
  gp4_analitika_patients_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Patient"];
        "application/x-www-form-urlencoded": components["schemas"]["Patient"];
        "multipart/form-data": components["schemas"]["Patient"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Patient"];
        };
      };
    };
  };
  gp4_analitika_patients_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this patient. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Patient"];
        };
      };
    };
  };
  gp4_analitika_patients_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this patient. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Patient"];
        "application/x-www-form-urlencoded": components["schemas"]["Patient"];
        "multipart/form-data": components["schemas"]["Patient"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Patient"];
        };
      };
    };
  };
  gp4_analitika_patients_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this patient. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_patients_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this patient. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPatient"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPatient"];
        "multipart/form-data": components["schemas"]["PatchedPatient"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Patient"];
        };
      };
    };
  };
  gp4_analitika_profosmotr_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedProfosmotrList"];
        };
      };
    };
  };
  gp4_analitika_profosmotr_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profosmotr"];
        "application/x-www-form-urlencoded": components["schemas"]["Profosmotr"];
        "multipart/form-data": components["schemas"]["Profosmotr"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Profosmotr"];
        };
      };
    };
  };
  gp4_analitika_profosmotr_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profosmotr. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profosmotr"];
        };
      };
    };
  };
  gp4_analitika_profosmotr_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profosmotr. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profosmotr"];
        "application/x-www-form-urlencoded": components["schemas"]["Profosmotr"];
        "multipart/form-data": components["schemas"]["Profosmotr"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profosmotr"];
        };
      };
    };
  };
  gp4_analitika_profosmotr_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profosmotr. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_profosmotr_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this profosmotr. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedProfosmotr"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedProfosmotr"];
        "multipart/form-data": components["schemas"]["PatchedProfosmotr"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profosmotr"];
        };
      };
    };
  };
  gp4_analitika_uchastki_list: {
    parameters: {
      query?: {
        name?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUchastkiList"];
        };
      };
    };
  };
  gp4_analitika_uchastki_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Uchastki"];
        "application/x-www-form-urlencoded": components["schemas"]["Uchastki"];
        "multipart/form-data": components["schemas"]["Uchastki"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Uchastki"];
        };
      };
    };
  };
  gp4_analitika_uchastki_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this uchastki. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Uchastki"];
        };
      };
    };
  };
  gp4_analitika_uchastki_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this uchastki. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Uchastki"];
        "application/x-www-form-urlencoded": components["schemas"]["Uchastki"];
        "multipart/form-data": components["schemas"]["Uchastki"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Uchastki"];
        };
      };
    };
  };
  gp4_analitika_uchastki_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this uchastki. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_uchastki_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this uchastki. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUchastki"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUchastki"];
        "multipart/form-data": components["schemas"]["PatchedUchastki"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Uchastki"];
        };
      };
    };
  };
  gp4_analitika_vaccinations_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedVaccinationList"];
        };
      };
    };
  };
  gp4_analitika_vaccinations_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vaccination"];
        "application/x-www-form-urlencoded": components["schemas"]["Vaccination"];
        "multipart/form-data": components["schemas"]["Vaccination"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Vaccination"];
        };
      };
    };
  };
  gp4_analitika_vaccinations_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this vaccination. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vaccination"];
        };
      };
    };
  };
  gp4_analitika_vaccinations_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this vaccination. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vaccination"];
        "application/x-www-form-urlencoded": components["schemas"]["Vaccination"];
        "multipart/form-data": components["schemas"]["Vaccination"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vaccination"];
        };
      };
    };
  };
  gp4_analitika_vaccinations_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this vaccination. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  gp4_analitika_vaccinations_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this vaccination. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedVaccination"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedVaccination"];
        "multipart/form-data": components["schemas"]["PatchedVaccination"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vaccination"];
        };
      };
    };
  };
}
